openapi: "3.0.0"
info:
  version: 2.14.0
  title: Minka Ledger Protocol
  description: Esta especificaci√≥n de API cubre los endpoints clave necesarios para integrarse al sistema de pagos utilizando el protocolo Minka
  termsOfService: http://minka.io/terms/
  contact:
    name: Minka API Team
    email: api@minka.io
    url: http://docs.minka.io
  license:
    name: Mozilla Public Licence MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
servers:
  - url: https://ldg-dev.one/api/v2
    description: Servidor de pruebas (uses test data)
  - url: https://ldg-stg.one/api/v2
    description: Servidor de certificacion (uses test data)
paths:
  /ledgers:
    post:
      summary: Crear una nueva instancia de ledger.
      tags:
        - Ledger
      requestBody:
        description: Ledger body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLedgerRecord"
      responses:
        "201":
          description: Created ledger instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
                  - $ref: "#/components/schemas/RecordRelationNotFoundError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Creates a new ledger instance. A ledger instance stores configurations about the ledger such as global access rules and the ledger signer, responsible for signing transactions owned by the ledger"
    get:
      summary: List ledger instances
      tags:
        - Ledger
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Ledger instances page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the ledger instances from the system.
  /ledger:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    get:
      summary: Read a ledger instance
      tags:
        - Ledger
      responses:
        "200":
          description: Ledger instance corresponding to the ledger loaded in context
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
    put:
      summary: Update a Ledger instance
      tags:
        - Ledger
      requestBody:
        description: Ledger instance body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLedgerRecord"
      responses:
        "200":
          description: Updated Ledger instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No ledger instance found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
                  - $ref: "#/components/schemas/RecordRelationNotFoundError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a ledger instance loaded in context. If the ledger instance with the provided handle doesn't exist, API will return 404 error."
  /ledger/proofs:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Sign a ledger
      tags:
        - Ledger
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Ledger corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Ledger found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a ledger loaded in context. If the ledger doesn't exist, API will return 404 error."
  /ledger/changes:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List ledger instance changes
      tags:
        - Ledger
      responses:
        "200":
          description: Ledger instance changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/ledger/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a ledger change
      tags:
        - Ledger
      responses:
        "200":
          description: ledger change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LedgerChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /bridges:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a bridge.
      tags:
        - Bridge
      requestBody:
        description: Bridge body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBridgeRecord"
      responses:
        "201":
          description: Created bridge
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Creates a new bridge. A Bridge represents a ledger configuration record that is used to register remote services with the ledger. An example of a bridge is an integration service that connects with a banking core in order to perform debit and credit operations in response to ledger balance movements.
    get:
      summary: List bridges
      tags:
        - Bridge
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Bridges page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the bridges from the system.
  "/bridges/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a bridge
      tags:
        - Bridge
      responses:
        "200":
          description: Bridge corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
    put:
      summary: Update a bridge
      tags:
        - Bridge
      requestBody:
        description: Bridge body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBridgeRecord"
      responses:
        "200":
          description: Updated bridge
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No bridge found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a bridge identified by the provided `handle`. If the bridge with the provided handle doesn't exist, API will return 404 error."
  "/bridges/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a bridge
      tags:
        - Bridge
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Bridge corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Bridge found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a bridge identified by the provided `handle`. If the bridge with the provided handle doesn't exist, API will return 404 error."
  "/bridges/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List bridge changes
      tags:
        - Bridge
      responses:
        "200":
          description: Bridge changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BridgeChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/bridges/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a bridge change
      tags:
        - Bridge
      responses:
        "200":
          description: bridge change record
          content:
            application/:
              schema:
                $ref: "#/components/schemas/BridgeChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/bridges/{id}/activate":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Mark the status of a bridge as active
      tags:
        - Bridge
      requestBody:
        description: Body of options to use when activating a bridge
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateBridgeRecord"
      responses:
        "202":
          description: Bridge activation request accepted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Creates a new bridge. A Bridge represents a ledger configuration record that is used to register remote services with the ledger. An example of a bridge is an integration service that connects with a banking core in order to perform debit and credit operations in response to ledger balance movements.
  /signers:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a signer
      tags:
        - Signer
      requestBody:
        description: Signer body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSignerRecord"
      responses:
        "201":
          description: Created signer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Creates a new key pair. Private key is encrypted using `secret` parameter from the request. Ledger is using `Ed25519 (EdDSA, Curve25519)` to generate signing keys."
    get:
      summary: List signers
      tags:
        - Signer
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/SignerFilter"
      responses:
        "200":
          description: Signers page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the signers from the system.
  "/signers/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a signer
      tags:
        - Signer
      responses:
        "200":
          description: Signer corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No signer found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a signer identified by the provided `handle`. If the signer with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a Signer
      tags:
        - Signer
      requestBody:
        description: Signer body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSignerRecord"
      responses:
        "200":
          description: Updated Signer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No signer found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a signer identified by the provided `handle`. If the signer with the provided handle doesn't exist, API will return 404 error."
  "/signers/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a signer
      tags:
        - Signer
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Signer corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Signer found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a signer identified by the provided `handle`. If the signer with the provided handle doesn't exist, API will return 404 error."
  "/signers/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a signer changes
      tags:
        - Signer
      responses:
        "200":
          description: signer changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/signers/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a signer change
      tags:
        - Signer
      responses:
        "200":
          description: signer change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /symbols:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a symbol
      tags:
        - Symbol
      requestBody:
        description: Symbol body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSymbolRecord"
      responses:
        "201":
          description: Created symbol
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: |-
        Creates a new symbol. A symbol record identifies a unit of exchange. Symbols can identify currencies, loyalty points, or any other concept that can be counted.
        When creating a symbol, `factor` has to be specified - it is a number that is a power of 10 - 10ÀÜn - where n represents the number of decimal places valid for the created symbol.
        For example:
        - if `factor == 1` values identified by this symbol are integers,
        - if `factor == 10` values have 1 decimal place,
        - if `factor == 100` values have 2 decimal places, etc.
    get:
      summary: List symbols
      tags:
        - Symbol
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Symbols page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the symbols from the system.
  "/symbols/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a symbol
      tags:
        - Symbol
      responses:
        "200":
          description: Symbol corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a symbol identified by the provided `handle`. If the symbol with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a Symbol
      tags:
        - Symbol
      requestBody:
        description: Symbol body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSymbolRecord"
      responses:
        "200":
          description: Updated Symbol
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No symbol found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a symbol identified by the provided `handle`. If the symbol with the provided handle doesn't exist, API will return 404 error."
  "/symbols/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a symbol
      tags:
        - Symbol
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Symbol corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Symbol found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a symbol identified by the provided `handle`. If the symbol with the provided handle doesn't exist, API will return 404 error."
  "/symbols/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a symbol changes
      tags:
        - Symbol
      responses:
        "200":
          description: symbol changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/symbols/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a symbol change
      tags:
        - Symbol
      responses:
        "200":
          description: symbol change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /schemas:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a schema
      tags:
        - Schema
      requestBody:
        description: Schema body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSchemaRecord"
      responses:
        "201":
          description: Created schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: |-
        Creates a new schema. Schemas contains a set of rules and constraints that can be used to validate records. Each schema has a record property
        which references the type of records that can be validated using the schema. A schema can optionally extend another one by using the `extend`
        property which references the parent schema by its handle. If a record type has at least one schema, a schema will be mandatory for all records
        of that type. To specify which schema should be used to validate a record, the `schema` property must be passed when creating or updating a record.
    get:
      summary: List schemas
      tags:
        - Schema
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/SchemaFilter"
      responses:
        "200":
          description: Schemas page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the schemas from the system.
  "/schemas/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a schema
      tags:
        - Schema
      responses:
        "200":
          description: Schema corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a schema identified by the provided `handle`. If the schema with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update an schema
      tags:
        - Schema
      requestBody:
        description: Schema body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSchemaRecord"
      responses:
        "200":
          description: Updated schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No schema found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a schema identified by the provided `handle`. If the schema with the provided handle doesn't exist, API will return 404 error."
  "/schemas/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a schema
      tags:
        - Schema
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Schema corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Schema found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a schema identified by the provided `handle`. If the schema with the provided handle doesn't exist, API will return 404 error."
  "/schemas/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a schema changes
      tags:
        - Schema
      responses:
        "200":
          description: schema changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/schemas/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a schema change
      tags:
        - Schema
      responses:
        "200":
          description: schema change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /wallets:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a wallet
      tags:
        - Wallet
      requestBody:
        description: Wallet body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWalletRecord"
      responses:
        "201":
          description: Created wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: |-
        Creates a new wallet. Wallets are used to represent anything that can hold a balance. For example, bank accounts, loyalty point accounts, subscriptions, bills, loans, etc.
        A wallet can contain balances in one or multiple symbols created by the user.
    get:
      summary: List wallets
      tags:
        - Wallet
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Wallets page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the wallets from the system.
  "/wallets/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    get:
      summary: Read a wallet
      tags:
        - Wallet
      responses:
        "200":
          description: Wallet corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a wallet identified by the provided `handle`. If the wallet with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a wallet
      tags:
        - Wallet
      requestBody:
        description: Wallet body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWalletRecord"
      responses:
        "200":
          description: Updated Wallet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No wallet found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a wallet identified by the provided `handle`. If the wallet with the provided handle doesn't exist, API will return 404 error."
    delete:
      summary: Drop a wallet
      tags:
        - Wallet
      requestBody:
        description: Wallet drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/RecordDropRejectedError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/wallets/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a wallet
      tags:
        - Wallet
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Wallet corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Wallet found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a wallet identified by the provided `handle`. If the wallet with the provided handle doesn't exist, API will return 404 error."
  "/wallets/{id}/drop":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    post:
      summary: Drop a wallet
      tags:
        - Wallet
      requestBody:
        description: Wallet drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/RecordDropRejectedError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/wallets/{id}/limits":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    get:
      summary: List wallet limits
      tags:
        - Wallet
      responses:
        "200":
          description: Limits corresponding to the provided wallet `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletLimitPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves limits of wallet identified by the provided `handle`. If the wallet with the provided handle doesn't exist, API will return 404 error."
  "/wallets/{id}/anchors":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
      - $ref: "#/components/parameters/WalletAnchorsFilter"
    get:
      summary: Read a wallet anchors
      tags:
        - Wallet
      responses:
        "200":
          description: Anchors corresponding to the provided wallet address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the anchors corresponding to wallet identified by the provided address.
  "/wallets/{id}/anchors/!lookup":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    post:
      summary: Named query for fetching anchors
      tags:
        - Wallet
      requestBody:
        description: Anchor lookup body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnchorLookupPayload"
      responses:
        "200":
          description: Anchor list found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Queries anchors corresponding to a wallet.
  "/wallets/{id}/domains":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    get:
      summary: Read a wallet domains
      tags:
        - Wallet
      responses:
        "200":
          description: Domains corresponding to the provided wallet address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves the domains related to a wallet identified by the provided address.
  "/wallets/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a wallet changes
      tags:
        - Wallet
      responses:
        "200":
          description: wallet changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/wallets/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a wallet change
      tags:
        - Wallet
      responses:
        "200":
          description: wallet change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/wallets/{id}/balances":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/WalletIdentifier"
    get:
      summary: List balances of wallet
      tags:
        - Wallet
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Wallet balances page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WalletBalancePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: |-
        Retrieves all the balances in the wallet identified by the provided `handle`. If the wallet with the provided handle doesn't exist, API will return 404 error.
        Balances are returned as an `integer` number and have to be divided by factor assigned to balance symbol to get a decimal representation of the value.
  /intents:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Crear un intento (intent)
      operationId: createIntent
      tags:
        - Intent
      requestBody:
        description: Intent body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIntentRequest"
      responses:
        "201":
          description: Created Intent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/RecordRelationNotFoundError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Intento de pago
    get:
      summary: List de intentos
      tags:
        - Intent
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/IntentFilter"
      responses:
        "200":
          description: Intents page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntentPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the intents from the system.
  "/intents/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Recuperar un intento por su ID (handle)
      tags:
        - Intent
      responses:
        "200":
          description: Respuesta exitosa con los detalles del intento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No intent found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Recupera un intento identificado por el handle proporcionado. Si el intento con el handle proporcionado no existe, la API devolver√° un error 404."
  "/intents/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a intent changes
      tags:
        - Intent
      responses:
        "200":
          description: intent changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntentChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/intents/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read an intent change
      tags:
        - Intent
      responses:
        "200":
          description: intent change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntentChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/intents/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Enviar una prueba de procesamiento a intent.
      tags:
        - Intent
      requestBody:
        description: Firma para agregar prueba al intent.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Intento correspondiente al handle proporcionado con una nueva firma a√±adida.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateIntentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No intent found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "A√±ade una firma a un intento identificado por el handle proporcionado. Si el intento con el handle proporcionado no existe, la API devolver√° un error 404."
  /effects:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create an effect
      tags:
        - Effect
      requestBody:
        description: Effect body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEffectRecord"
      responses:
        "201":
          description: Created effect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: |-
        Effects describe behaviors that can be triggered because of a change in the ledger data. Effects are the main mechanism for adding new functionality to ledgers that is use case specific.

        Each change in ledger data structures broadcasts an event that can be used to notify external systems through effects. Event is identified by a signal - one of the predefined names provided by the Ledger:
        - `balance-received` - raised when wallet receives a balance
        - `effect-created` - raised when a new effect is created
        - `intent-created` - raised when a new intent is created
        - `signer-created` - raised when a new effect is created
        - `symbol-created` - raised when a new symbol is created
        - `wallet-created` - raised when a new wallet is created

        Each effect is registered for specific event signal. It also has a filter which allows for more granular control of conditions that are going to trigger event forwarding. Filter can be used to select only certain events based on the event data.

        Effect action defines how to forward the events to external systems or ledger plugins. For example calling the external system through webhooks.

        Currently only one mechanism is supported:
        - `webhook` - call an external system through webhooks
    get:
      summary: List effects
      tags:
        - Effect
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Effects page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the effects from the system.
  "/effects/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read an effect
      tags:
        - Effect
      responses:
        "200":
          description: Effect corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No effect found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves an effect identified by the provided `handle`. If the effect with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update an effect
      tags:
        - Effect
      requestBody:
        description: Effect body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEffectRecord"
      responses:
        "200":
          description: Updated effect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No effect found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates an effect identified by the provided `handle`. If the effect with the provided handle doesn't exist, API will return 404 error."
  "/effects/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign an effect
      tags:
        - Effect
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Effect corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Effect found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to an effect identified by the provided `handle`. If the effect with the provided handle doesn't exist, API will return 404 error."
  "/effects/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List an effect changes
      tags:
        - Effect
      responses:
        "200":
          description: effect changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/effects/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read an effect change
      tags:
        - Effect
      responses:
        "200":
          description: effect change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EffectChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /circles:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a circle
      tags:
        - Circle
      requestBody:
        description: Circle body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCircleRecord"
      responses:
        "201":
          description: Created circle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Circles describes roles or groups of signers.
    get:
      summary: List circles
      tags:
        - Circle
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Circles page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CirclePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the circles from the system.
  "/circles/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a circle
      tags:
        - Circle
      responses:
        "200":
          description: Circle corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No circle found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a circle identified by the provided `handle`. If the circle with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a circle
      tags:
        - Circle
      requestBody:
        description: Circle body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCircleRecord"
      responses:
        "200":
          description: Updated circle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No circle found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a circle identified by the provided `handle`. If the circle with the provided handle doesn't exist, API will return 404 error."
  "/circles/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a circle
      tags:
        - Circle
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Circle corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Circle found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a circle identified by the provided `handle`. If the circle with the provided handle doesn't exist, API will return 404 error."
  "/circles/{id}/signers":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Assign a signer to a circle
      tags:
        - Circle
      requestBody:
        description: Circle signer body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCircleSignerRecord"
      responses:
        "200":
          description: Assigned circle signer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleSignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Circles describes roles or groups of signers.
    get:
      summary: List circle signers
      tags:
        - Circle
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Circle signers page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleSignerPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the signers of a circle
  "/circles/{id}/signers/{link}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Link"
    get:
      summary: Read circle signer link
      tags:
        - Circle
      responses:
        "200":
          description: Circle signer link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleSignerRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves a circle signer link
    delete:
      summary: Remove a signer of a circle
      tags:
        - Circle
      requestBody:
        description: Circle signer drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/circles/{id}/signers/{link}/drop":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Link"
    post:
      summary: Remove a signer of a circle
      tags:
        - Circle
      requestBody:
        description: Circle signer drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/circles/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a circle changes
      tags:
        - Circle
      responses:
        "200":
          description: Circle changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/circles/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a circle change
      tags:
        - Circle
      responses:
        "200":
          description: Circle change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CircleChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /policies:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a policy
      tags:
        - Policy
      requestBody:
        description: Policy body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePolicyRecord"
      responses:
        "201":
          description: Created policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Policies describes roles or groups of signers.
    get:
      summary: List policies
      tags:
        - Policy
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PolicyFilter"
      responses:
        "200":
          description: Policies page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the policies from the system.
  "/policies/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a policy
      tags:
        - Policy
      responses:
        "200":
          description: Policy corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No policy found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a policy identified by the provided `handle`. If the policy with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a policy
      tags:
        - Policy
      requestBody:
        description: Policy body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePolicyRecord"
      responses:
        "200":
          description: Updated policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No policy found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a policy identified by the provided `handle`. If the policy with the provided handle doesn't exist, API will return 404 error."
  "/policies/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a policy
      tags:
        - Policy
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Policy corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Policy found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a policy identified by the provided `handle`. If the policy with the provided handle doesn't exist, API will return 404 error."
  "/policies/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a policy changes
      tags:
        - Policy
      responses:
        "200":
          description: Policy changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/policies/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a policy change
      tags:
        - Policy
      responses:
        "200":
          description: Policy change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /system/requests:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    get:
      summary: List requests
      tags:
        - Request
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/RequestFilter"
      responses:
        "200":
          description: Requests page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the requests from the system.
  "/system/requests/{address}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/Address"
    get:
      summary: Read a request
      tags:
        - Request
      responses:
        "200":
          description: Request corresponding to the provided `address`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No request found for the provided `address`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a record identified by the provided `address`. If the record with the provided address doesn't exist, API will return 404 error."
  /anchors:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create an anchor
      tags:
        - Anchor
      requestBody:
        description: Anchor body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAnchorRecord"
      responses:
        "201":
          description: Created anchor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "TODO: Description for anchors"
    get:
      summary: List anchors
      tags:
        - Anchor
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/AnchorFilter"
      responses:
        "200":
          description: Anchors page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the anchors from the system.
  "/anchors/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read an anchor
      tags:
        - Anchor
      responses:
        "200":
          description: Anchor corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves an anchor identified by the provided `handle`. If the anchor with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update an anchor
      tags:
        - Anchor
      requestBody:
        description: Anchor body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAnchorRecord"
      responses:
        "200":
          description: Updated Anchor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No anchor found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates an anchor identified by the provided `handle`. If the anchor with the provided handle doesn't exist, API will return 404 error."
    delete:
      summary: Drop an anchor
      tags:
        - Anchor
      requestBody:
        description: Anchor drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/anchors/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign an anchor
      tags:
        - Anchor
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Anchor corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Anchor found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to an anchor identified by the provided `handle`. If the anchor with the provided handle doesn't exist, API will return 404 error."
  "/anchors/{id}/drop":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Drop an anchor
      tags:
        - Anchor
      requestBody:
        description: Anchor drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/anchors/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List an anchor changes
      tags:
        - Anchor
      responses:
        "200":
          description: anchor changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/anchors/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read an anchor change
      tags:
        - Anchor
      responses:
        "200":
          description: anchor change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnchorChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /advices/alias-resolve:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Execute alias resolve advice
      tags:
        - Advice
      requestBody:
        description: Alias resolve advice body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdviceAliasResolve"
      responses:
        "200":
          description: Alias resolve advice result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdviceAliasResolveResult"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: '"Advice which resolves target addresses for an alias"'
  /domains:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a domain
      tags:
        - Domain
      requestBody:
        description: Domain body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDomainRecord"
      responses:
        "201":
          description: Created domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Creates a new domain. A domain represents a namespace in the ledger. Domains can contain other ledger records and are a way to achieve data separation in the ledger.
    get:
      summary: List domains
      tags:
        - Domain
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/BaseFilter"
      responses:
        "200":
          description: Domains page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all the domains from the system.
  "/domains/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerHandleIdentifier"
    get:
      summary: Read a domain
      tags:
        - Domain
      responses:
        "200":
          description: Domain corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a domain identified by the provided `handle`. If the domain with the provided handle doesn't exist, API will return 404 error."
    put:
      summary: Update a domain
      tags:
        - Domain
      requestBody:
        description: Domain body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDomainRecord"
      responses:
        "200":
          description: Updated domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No domain found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordUpdateRejectedError"
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Updates a domain identified by the provided `handle`. If the domain with the provided handle doesn't exist, API will return 404 error."
  "/domains/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerHandleIdentifier"
    post:
      summary: Sign a domain
      tags:
        - Domain
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Proof"
      responses:
        "200":
          description: Domain corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No domain found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a domain identified by the provided `handle`. If the domain with the provided handle doesn't exist, API will return 404 error."
  "/domains/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerHandleIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List a domain changes
      tags:
        - Domain
      responses:
        "200":
          description: Domain changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/domains/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerHandleIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a domain change
      tags:
        - Domain
      responses:
        "200":
          description: Domain change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  /reports:
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
    post:
      summary: Create a report
      tags:
        - Report
      requestBody:
        description: Report body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReportRecord"
      responses:
        "201":
          description: Created report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordDuplicatedError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "TODO: Description for reports"
    get:
      summary: List reports
      tags:
        - Report
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/ReportFilter"
      responses:
        "200":
          description: Reports page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: Retrieves all reports from the system.
  "/reports/{id}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    get:
      summary: Read a report
      tags:
        - Report
      responses:
        "200":
          description: Report corresponding to the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Retrieves a report identified by the provided `handle`. If the report with the provided handle doesn't exist, API will return 404 error."
    delete:
      summary: Drop a report
      tags:
        - Report
      requestBody:
        description: Report drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/reports/{id}/proofs":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Sign a report
      tags:
        - Report
      requestBody:
        description: Proof body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportProof"
      responses:
        "200":
          description: Report corresponding to the provided `handle` with new signature added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: No Report found for the provided `handle`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
      description: "Adds a signature to a report identified by the provided `handle`. If the report with the provided handle doesn't exist, API will return 404 error."
  "/reports/{id}/drop":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
    post:
      summary: Drop a report
      tags:
        - Report
      requestBody:
        description: Report drop body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DropRecord"
      responses:
        "204":
          description: Drop succeeded
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable entity
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RecordSchemaInvalidError"
                  - $ref: "#/components/schemas/CryptoHashInvalidError"
                  - $ref: "#/components/schemas/RecordInvalidError"
                  - $ref: "#/components/schemas/CryptoSignatureInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/report/{id}/changes":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/BaseFilter"
    get:
      summary: List report changes
      tags:
        - Report
      responses:
        "200":
          description: Report changes page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportChangePagedList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
  "/reports/{id}/changes/{change}":
    parameters:
      - $ref: "#/components/parameters/ActiveLedger"
      - $ref: "#/components/parameters/LedgerAddressIdentifier"
      - $ref: "#/components/parameters/Change"
    get:
      summary: Read a report change
      tags:
        - Report
      responses:
        "200":
          description: Report change record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportChangeRecord"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUnauthorizedError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthForbiddenError"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordNotFoundError"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordSchemaInvalidError"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUnexpectedError"
components:
  securitySchemes:
    RequestSignature:
      type: http
      scheme: bearer
      description: "JWT signed by private key. The presence of this token is not mandatory. It becomes required through the configuration of authorization access rules that requires a token to grant access. Once sent, the token is validated for its format, signature and expiration, regardless of the presence of access rules."
  schemas:
    CreateIntentRequest:
      type: object
      properties:
        hash:
          type: string
          description: El hash √∫nico del intento.
        data:
          $ref: "#/components/schemas/IntentData"
        meta:
          type: object
          properties:
            proofs:
              type: array
              items:
                $ref: "#/components/schemas/Proof"
    CreateIntentResponse:
      type: object
      properties:
        hash:
          type: string
          description: El hash √∫nico del intento.
          example: "10c95130a3fc1d4cadf09e9a1c03008529a12765e10242e9d71540d2b588d56b"
        data:
          $ref: "#/components/schemas/IntentData"
        luid:
          type: string
          description: El ID local √∫nico del intento.
          example: "$int.3vf2J78sptIkQr2lq"
        meta:
          $ref: "#/components/schemas/IntentMeta"
    IntentData:
      type: object
      properties:
        handle:
          type: string
          description: El identificador del intento.
          example: k3PdrLoh1m1BnKlr0Kou7
        claims:
          type: array
          items:
            $ref: "#/components/schemas/Claims"
        schema:
          type: string
          description: El tipo de esquema del intento.
          example: transfer
        custom:
          $ref: "#/components/schemas/IntentCustom"
        access:
          type: array
          items:
            $ref: "#/components/schemas/Access"
        config:
          $ref: "#/components/schemas/Config"
    Claims:
      type: object
      properties:
        action:
          type: string
          description: La acci√≥n de la reclamaci√≥n.
          example: "transfer"
        source:
          $ref: "#/components/schemas/Source"
        target:
          $ref: "#/components/schemas/Target"
        symbol:
          $ref: "#/components/schemas/Symbol"
        amount:
          type: number
          description: El monto asociado con la accion.
          example: 4200
    IntentMeta:
      type: object
      properties:
        proofs:
          type: array
          items:
            $ref: "#/components/schemas/Proof"
          example:
            - custom:
                moment: "2024-08-30T03:34:19.425Z"
                status: "created"
              digest: "ccec86775d8b305c5bebeb228a4d6a86578bca526eea9ff11bb563359801c9d1"
              method: "ed25519-v2"
              public: "rpteZ4kOuiB6a9/KHCqOc8HcW5J20Hrb5D4ZCbZYpSE="
              result: "1iuU0QxYh/FamG2F5c4qrk3+4nbMOz7MeIRzDiO4FZG2syIE4F1Xu7KgVk0qkwk9RENkXlOr468T34FgbHR7Bg=="
            - custom:
                luid: "$int.3vf2J78sptIkQr2lq"
                moment: "2024-08-30T03:34:19.930Z"
                status: "created"
              digest: "3√ü284fd20a02bdd8ef76bbae1e4ace97c7eda9e912e9c108025344e772484cd5b"
              method: "ed25519-v2"
              public: "MrByXmC5wKLCV0irkNlLTeO/DmmyI0xVPwI29Os2njQ="
              result: "11AST4aUMNBxU0SrBBYUXuqDoGs07bPYOgmVm3+DZ5J1URDgneKJInVNCYgOH70oP/mdLnMzr5fC9OB27ZiECQ=="
        routed:
          type: boolean
          description: Indica si el intento fue enrutado.
          example: true
        status:
          type: string
          description: El estado del intento.
          example: "completed"
        thread:
          type: string
          description: El identificador del hilo.
          example: "7RFbLLoTabUa7zX1W"
        moment:
          type: string
          format: date-time
          description: La marca de tiempo del evento meta.
          example: "2024-08-30T03:34:19.938Z"
        owners:
          type: array
          items:
            type: string
            description: Las claves p√∫blicas de los propietarios.
            example: "rpteZ4kOuiB6a9/KHCqOc8HcW5J20Hrb5D4ZCbZYpSE="

    IntentCustom:
      type: object
      properties:
        description:
          type: string
          description: Descripci√≥n personalizada del intento.
          example: "Primer intento de pago"
    Source:
      type: object
      properties:
        handle:
          type: string
          description: El identificador del participante fuente.
          example: "svgs:1001001345@teslabank.io"
        custom:
          $ref: "#/components/schemas/SourceCustom"
    SourceCustom:
      type: object
      properties:
        name:
          type: string
          description: El nombre del participante fuente.
          example: "Nikola Tesla"
        idType:
          type: string
          description: El tipo de identificaci√≥n del participante fuente.
          example: "nidn"
        idNumber:
          type: string
          description: El n√∫mero de identificaci√≥n del participante fuente.
          example: "429493434"
        entityType:
          type: string
          description: El tipo de entidad del participante fuente.
          example: "individual"
        anchor:
          type: string
          description: El punto de anclaje, como un m√©todo de contacto, del participante fuente.
          example: "tel:385914242424"

    Target:
      type: object
      properties:
        custom:
          $ref: "#/components/schemas/TargetCustom"
        handle:
          type: string
          description: El identificador del participante objetivo.
          example: "svgs:1001009422@mintbank.dev"

    TargetCustom:
      type: object
      properties:
        name:
          type: string
          description: El nombre del participante objetivo.
          example: "Simon Bolivar"
        idType:
          type: string
          description: El tipo de identificaci√≥n del participante objetivo.
          example: "nidn"
        idNumber:
          type: string
          description: El n√∫mero de identificaci√≥n del participante objetivo.
          example: "58252939"
        entityType:
          type: string
          description: El tipo de entidad del participante objetivo.
          example: "individual"
        anchor:
          type: string
          description: El punto de anclaje, como un m√©todo de contacto, del participante objetivo.
          example: "tel:573504242423"

    Symbol:
      type: object
      properties:
        handle:
          type: string
          description: El identificador del s√≠mbolo de la moneda.
          example: "usd"

    Access:
      type: object
      properties:
        action:
          type: string
          description: El tipo de acci√≥n de acceso.
          example: "any"
        signer:
          type: object
          properties:
            public:
              type: string
              description: La clave p√∫blica del firmante.
              example: "rpteZ4kOuiB6a9/KHCqOc8HcW5J20Hrb5D4ZCbZYpSE="
        bearer:
          type: object
          properties:
            $signer:
              type: object
              properties:
                public:
                  type: string
                  description: La clave p√∫blica del portador.
                  example: "rpteZ4kOuiB6a9/KHCqOc8HcW5J20Hrb5D4ZCbZYpSE="

    Config:
      type: object
      properties:
        commit:
          type: string
          description: Configuraci√≥n de confirmaci√≥n.
          example: "auto"

    Proof:
      type: object
      properties:
        custom:
          $ref: "#/components/schemas/ProofCustom"
        digest:
          type: string
          description: El digest criptogr√°fico de la prueba.
          example: "ccec86775d8b305c5bebeb228a4d6a86578bca526eea9ff11bb563359801c9d1"
        method:
          type: string
          description: El m√©todo criptogr√°fico utilizado.
          example: "ed25519-v2"
        public:
          type: string
          description: La clave p√∫blica utilizada en la prueba.
          example: "rpteZ4kOuiB6a9/KHCqOc8HcW5J20Hrb5D4ZCbZYpSE="
        result:
          type: string
          description: El resultado del proceso de la prueba.
          example: "1iuU0QxYh/FamG2F5c4qrk3+4nbMOz7MeIRzDiO4FZG2syIE4F1Xu7KgVk0qkwk9RENkXlOr468T34FgbHR7Bg=="

    ProofCustom:
      type: object
      properties:
        moment:
          type: string
          format: date-time
          description: La marca de tiempo de la prueba.
          example: "2024-08-30T03:34:19.425Z"
        status:
          type: string
          description: El estado de la prueba.
          example: "created"

    NewProof:
      type: object
      properties:
        method:
          type: string
          description: El m√©todo criptogr√°fico utilizado.
          example: "ed25519-v2"
        public:
          type: string
          description: La clave p√∫blica utilizada en la prueba.
          example: "WAweF9PHlboQoW0z8NqhZXFmzUTaV74NRFAd/aILprE="
        digest:
          type: string
          description: El digest criptogr√°fico de la prueba.
          example: "4969e3c012b66d88cec597bf337fc01eab8d651e6ed2d5c40236cc1f7d93435a"
        result:
          type: string
          description: El resultado del proceso de la prueba.
          example: "0G2gvSfBx6MwPT8ShBaiYx7zwa5Kqc4Cq3S3NXV1m5/ZPozoH/SUouuhi9sQU+f0yo0eX4ygH7PzE3PAdlxsCQ=="
        custom:
          type: object
          properties:
            status:
              type: string
              description: El estado de la prueba.
              example: "failed"
            reason:
              type: string
              description: La raz√≥n del fallo de la prueba.
              example: "bridge.account-not-found"
            detail:
              type: string
              description: Detalles adicionales sobre el fallo.
              example: "Could not find target account"
            failId:
              type: string
              description: Identificador del fallo.
              example: "ERR-0156"
    Luid:
      type: string
      pattern: '^\$[a-z]{3}\.[A-Za-z0-9_-]{17}$'
      example: $wlt.7mSVWFKX-Tfx2NsNj
      description: "|-
      String que representa un identificador √∫nico de registro en ledger.
      La genera el libro mayor cuando se almacena el registro.
      Su patr√≥n se define mediante: $<3 caracteres de abreviatura del tipo de registro>.
      <17 caracteres aleatorios>.
      La abreviatura del tipo de registro son 3 letras min√∫sculas para una lista predefinida de registros.
      Los caracteres aleatorios pueden ser letras min√∫sculas y may√∫sculas, d√≠gitos, _ y -."
    Hash:
      type: string
      pattern: "^[A-Fa-f0-9]{64}$"
      example: 4969e3c012b66d88cec597bf337fc01eab8d651e6ed2d5c40236cc1f7d93435a
    LedgerHandle:
      type: string
      pattern: '^(?!\$[a-z]{3}\.)[a-zA-Z0-9_\-:.=$/+]+$'
      example: ach
      description: "|-
        Cadena que representa un identificador de registro del libro mayor proporcionado por el creador del registro.
        El identificador puede consistir en letras min√∫sculas y may√∫sculas, d√≠gitos y caracteres especiales: _, -, :, ., =, $, /, +.
        El identificador no debe comenzar con el prefijo '$<3 letras>.' ya que este patr√≥n est√° reservado para el luid.
        El identificador no puede contener signos @ porque no puede a√±adirse a un dominio principal.
        Los registros que admiten dominios deben utilizar direcciones (esquema de Address).""
    Address:
      type: string
      pattern: '^(((?<schema>[a-zA-Z0-9_\-+.]+):)?(?<handle>[a-zA-Z0-9_\-+.]+))(@(?<parent>[a-zA-Z0-9_\-+.]+))?$'
      example: "tran:12345@pbz.hr"
      description: |-
        String that represents a ledger address. Addresses are used for referencing source and target in intent claims and to identify records which
        belong to domains. Address format consists of schema, handle and parent: [<schema>:]<handle>[@<parent>].
        Schema and parent are optional, but all 3 components can consist only of lowercase and uppercase letters, digits and special characters ., _, - and +
    AddressAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/Address"
          description: Defines a list of addresses
      additionalProperties: false
      description: Object representing aggregation operators for managing addresses.
    PublicKey:
      type: string
      pattern: "^[A-Za-z0-9+/]{43}=$"
      example: WAweF9PHlboQoW0z8NqhZXFmzUTaV74NRFAd/aILprE=
      description: Raw public key value encoded in base64
    Secret:
      type: string
      pattern: "^[A-Za-z0-9+/]{211}=$"
      format: pkcs5-encrypted
      example: MIGbMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAgRkLIat0HLagICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEELt1Miyg5QxGQm0Z3MGf5JAEQKDlo5kbktuZu+RA6L59rW3Dlr6PADSoyL3EKnPt+iKrDIuA5IUzKiv05HeQdD3zWY2j/wff3Z5LOhzFLshyHfA=
      description: PKCS5 encrypted secret key encoded in base64
    Amount:
      type: integer
      minimum: 0
      example: 1000
    LimitAmount:
      type: integer
      example: 100
    KeyFormat:
      type: string
      example: ed25519-raw
      enum:
        - ed25519-raw
      description: Identifier of the algorithm used to generate the key pair
    SignatureMethod:
      type: string
      example: ed25519-v2
      enum:
        - ed25519-v2
      description: Identifier of the algorithm used for asymmetric cryptography
    LedgerPublic:
      type: object
      properties:
        public:
          $ref: "#/components/schemas/PublicKey"
        format:
          $ref: "#/components/schemas/KeyFormat"
      description: Represents a cryptographic public key compatible with ledger tools and libraries
    SignatureResult:
      type: string
      pattern: "^[A-Za-z0-9+/]{86}==$"
      example: 0G2gvSfBx6MwPT8ShBaiYx7zwa5Kqc4Cq3S3NXV1m5/ZPozoH/SUouuhi9sQU+f0yo0eX4ygH7PzE3PAdlxsCQ==
      description: Proof value encoded in base64
    Custom:
      type: object
      additionalProperties: true
      example:
        type: PERSON
        reference: 3284759238475
      description: "Object that can additionally describe the record using `key:value` pairs"
    AccessCircle:
      type: string
      example: admin
      description: Defines a circle that must include the signer
    AccessCircleAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/AccessCircle"
          description: Defines a list of circles that must include the signer
          minItems: 1
      additionalProperties: false
      description: Object that represents aggregation operators to handle access rules regarding the record signers
    RecordOwnership:
      type: string
      enum:
        - owner
    AccessSigner:
      type: object
      example:
        format: ed25519-raw
        public: WAweF9PHlboQoW0z8NqhZXFmzUTaV74NRFAd/aILprE=
        custom:
          type: person
      properties:
        $record:
          $ref: "#/components/schemas/RecordOwnership"
        $ledger:
          $ref: "#/components/schemas/RecordOwnership"
        handle:
          $ref: "#/components/schemas/Address"
        format:
          $ref: "#/components/schemas/KeyFormat"
        public:
          $ref: "#/components/schemas/PublicKey"
        schema:
          $ref: "#/components/schemas/Address"
        $circle:
          oneOf:
            - $ref: "#/components/schemas/AccessCircle"
            - $ref: "#/components/schemas/AccessCircleAggregation"
        custom:
          $ref: "#/components/schemas/Custom"
      additionalProperties: false
      description: Defines access rule regarding the record signer. It could be a signer handle or a public key used to verify record hash signature.
    AccessSignerAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/AccessSigner"
          description: Defines a list of signers that must include the record signers
      additionalProperties: false
      description: Object that represents aggregation operators to handle access rules regarding the record signers
    AccessRecord:
      type: string
      example: any
      enum:
        - anchor
        - anchor-proof
        - any
        - bridge
        - bridge-proof
        - circle
        - circle-proof
        - circle-signer
        - domain
        - domain-proof
        - effect
        - effect-proof
        - intent
        - intent-proof
        - ledger
        - ledger-proof
        - policy
        - policy-proof
        - report
        - report-proof
        - request
        - schema
        - schema-proof
        - server
        - signer
        - signer-proof
        - symbol
        - symbol-proof
        - wallet
        - wallet-proof
      description: Defines the record affected by the access rule
    AccessRecordAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/AccessRecord"
          description: Defines a list of records that must include the target access record
      additionalProperties: false
      description: Object representing aggregation operators for managing target record of access rules.
    AccessAction:
      type: string
      example: any
      enum:
        - abort
        - access
        - activate
        - any
        - assign-signer
        - commit
        - create
        - destroy
        - drop
        - issue
        - limit
        - lookup
        - manage
        - read
        - remove-signer
        - spend
        - update
      description: Defines which action is affected by the access rule
    AccessActionAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/AccessAction"
          description: Defines a list of actions that must include the target access action
      additionalProperties: false
      description: Object representing aggregation operators for managing target action of access rules.
    AccessBearer:
      type: object
      properties:
        iss:
          type: string
          example: company.org
          description: Defines access rule regarding the issuer of bearer token
        sub:
          type: string
          example: admin
          description: Defines access rule regarding the subject of bearer token. It could be a signer handle or a public key used to verify token signature.
        aud:
          type: string
          example: ledger
          description: Defines access rule regarding the audience of bearer token
        hsh:
          type: boolean
          example: true
          description: Defines if the request hash is mandatory
        $signer:
          $ref: "#/components/schemas/AccessSigner"
      additionalProperties: false
    AccessBearerAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/AccessBearer"
          description: Defines a list of bearer token rules which at least one item must match the token sent
      description: Object that represents aggregation operators to handle bearer token access rules
      additionalProperties: false
    AccessWalletInvoke:
      type: string
      enum:
        - wallet.canSpendAllChangedRouteTargets
    AccessIntentInvoke:
      type: string
      enum:
        - intent.canReadAnyClaimWallet
        - intent.canReadAnyClaimWalletInThread
        - intent.canSpendEveryClaimWallet
        - intent.canSpendAnyClaimWallet
        - intent.canSpendAnyClaimWalletInThread
    AccessInvoke:
      oneOf:
        - $ref: "#/components/schemas/AccessWalletInvoke"
        - $ref: "#/components/schemas/AccessIntentInvoke"
    AccessFilter:
      type: object
      additionalProperties: true
      example:
        schema: bank
    AccessChange:
      type: object
      additionalProperties: true
      example:
        schema: p2p
    BaseAccessRule:
      type: object
      required:
        - action
      properties:
        signer:
          oneOf:
            - $ref: "#/components/schemas/AccessSigner"
            - $ref: "#/components/schemas/AccessSignerAggregation"
        invoke:
          $ref: "#/components/schemas/AccessInvoke"
        filter:
          $ref: "#/components/schemas/AccessFilter"
        change:
          $ref: "#/components/schemas/AccessChange"
        action:
          oneOf:
            - $ref: "#/components/schemas/AccessAction"
            - $ref: "#/components/schemas/AccessActionAggregation"
        bearer:
          oneOf:
            - $ref: "#/components/schemas/AccessBearer"
            - $ref: "#/components/schemas/AccessBearerAggregation"
    AccessRule:
      allOf:
        - $ref: "#/components/schemas/BaseAccessRule"
        - type: object
          properties:
            record:
              oneOf:
                - $ref: "#/components/schemas/AccessRecord"
                - $ref: "#/components/schemas/AccessRecordAggregation"
    AccessPolicy:
      type: object
      required:
        - policy
      properties:
        policy:
          oneOf:
            - $ref: "#/components/schemas/Address"
            - $ref: "#/components/schemas/AddressAggregation"
      additionalProperties: false

    PolicyValueStatus:
      type: string
      nullable: true
    PolicyValueStatusAggregation:
      type: object
      properties:
        $in:
          type: array
          items:
            $ref: "#/components/schemas/PolicyValueStatus"
          description: Defines a list of statuses that must include the status
          minItems: 1
      additionalProperties: false
      description: Object that represents aggregation statuses valid for a certain status policy value
    StatusPolicyValue:
      type: object
      required:
        - quorum
      properties:
        status:
          oneOf:
            - $ref: "#/components/schemas/PolicyValueStatus"
            - $ref: "#/components/schemas/PolicyValueStatusAggregation"
        quorum:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/AccessSigner"
              - $ref: "#/components/schemas/AccessSignerAggregation"
    LabelsPolicyValue:
      type: object
      required:
        - labels
      properties:
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
          description: Labels covered by the policy
        unique:
          type: array
          items:
            type: string
          description: Defines uniqueness criteria for the labels
    PolicyValues:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/BaseAccessRule"
          - $ref: "#/components/schemas/StatusPolicyValue"
          - $ref: "#/components/schemas/LabelsPolicyValue"
    CommonData:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        parent:
          $ref: "#/components/schemas/Hash"
        access:
          $ref: "#/components/schemas/Access"
        custom:
          $ref: "#/components/schemas/Custom"
      required:
        - handle
        - access
    BaseProof:
      type: object
      required:
        - method
        - public
        - digest
        - result
      properties:
        method:
          $ref: "#/components/schemas/SignatureMethod"
        public:
          $ref: "#/components/schemas/PublicKey"
        digest:
          $ref: "#/components/schemas/Hash"
        result:
          $ref: "#/components/schemas/SignatureResult"
    IntentStatus:
      type: string
      enum:
        - aborted
        - committed
        - created
        - failed
        - prepared
      example: aborted
      description: Attaches status of transaction performed in external system as additional information about the signature
    IntentProofCoreId:
      type: string
      example: 491c6a81-418d-4ca6-b263-30f1133d78ac
      description: Describes transaction id in external system
    IntentProofAction:
      type: string
      enum:
        - abort
        - commit
      description: Action corresponding to the signature
    IntentProofErrorReason:
      type: string
      enum:
        - bridge.account-not-found
        - bridge.account-inactive
        - bridge.account-insufficient-balance
        - bridge.account-limit-exceeded
        - bridge.entry-rejected
        - bridge.entry-hash-invalid
        - bridge.entry-signature-invalid
        - bridge.entry-signature-mismatch
        - bridge.entry-signature-missing
        - bridge.entry-schema-invalid
        - bridge.entry-mismatch
        - bridge.entry-duplicated
        - bridge.entry-timeout
        - bridge.intent-hash-invalid
        - bridge.intent-signature-invalid
        - bridge.intent-signature-missing
        - bridge.intent-unrelated
        - bridge.fraud-detected
        - bridge.ledger-failed
        - bridge.core-unreachable
        - bridge.unexpected-core-error
        - bridge.unexpected-error
      example: bridge.account-not-found
      description: Reports error reason by external system in case when processing of action fails in external system.
    IntentProofReasonDetail:
      type: string
      example: Cannot perform transaction
      description: Describes the error if error `reason` is reported
    IntentProofStatus:
      type: string
      enum:
        - pending
        - prepared
        - requested
        - failed
        - committed
        - completed
        - aborted
        - rejected
        - created
        - error
        - expired
      example: prepared
      description: Status asserted by the signature.
    IntentProofFailId:
      type: string
      example: ERR-0134
      description: References to error in the external system. It is usually an error code specific to external system.
    IntentProofData:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        status:
          $ref: "#/components/schemas/IntentProofStatus"
        coreId:
          $ref: "#/components/schemas/IntentProofCoreId"
        reason:
          $ref: "#/components/schemas/IntentProofErrorReason"
        detail:
          $ref: "#/components/schemas/IntentProofReasonDetail"
        failId:
          $ref: "#/components/schemas/IntentProofFailId"
        moment:
          $ref: "#/components/schemas/Moment"
        action:
          $ref: "#/components/schemas/IntentProofAction"
      additionalProperties: true
      example:
        status: failed
        reason: bridge.account-not-found
        detail: Could not find target account
        failId: ERR-0156
    IntentProof:
      allOf:
        - $ref: "#/components/schemas/BaseProof"
        - type: object
          required:
            - custom
          properties:
            custom:
              $ref: "#/components/schemas/IntentProofData"
    Owner:
      title: Owner
      type: string
      example: WAweF9PHlboQoW0z8NqhZXFmzUTaV74NRFAd/aILprE=
      description: Indicates the public key that owns a record. Signatures with custom.status = "created" are considered when creating the record
    Moment:
      title: Moment
      type: string
      format: date-time
      description: The moment of mutation of any information in the system
    Label:
      title: Label
      type: string
      description: A label attached to the record
      example: preferred
    QueryPop:
      type: object
      required:
        - $pop
      properties:
        $pop:
          type: number
          enum:
            - 1
            - -1
      description: Removes the first (-1) or last (1) element
    ArrayTransformer:
      type: object
      properties:
        $slice:
          type: integer
        $sort:
          type: integer
          enum:
            - 1
            - -1
    LabelPushAggregation:
      allOf:
        - $ref: "#/components/schemas/ArrayTransformer"
        - type: object
          required:
            - $each
          properties:
            $each:
              type: array
              items:
                $ref: "#/components/schemas/Label"
              minLength: 1
            $position:
              type: integer
              minimum: 0
    LabelPullAggregation:
      allOf:
        - $ref: "#/components/schemas/ArrayTransformer"
        - type: object
          required:
            - $in
          properties:
            $in:
              type: array
              items:
                $ref: "#/components/schemas/Label"
              minLength: 1
    LabelAddToSetAggregation:
      $ref: "#/components/schemas/LabelPushAggregation"
    LabelQueryPush:
      type: object
      required:
        - $push
      properties:
        $push:
          oneOf:
            - $ref: "#/components/schemas/Label"
            - $ref: "#/components/schemas/LabelPushAggregation"
    LabelQueryPull:
      type: object
      required:
        - $pull
      properties:
        $pull:
          oneOf:
            - $ref: "#/components/schemas/Label"
            - $ref: "#/components/schemas/LabelPullAggregation"
    LabelQueryPullAll:
      type: object
      required:
        - $pullAll
      properties:
        $pullAll:
          type: array
          items:
            $ref: "#/components/schemas/Label"
          minLength: 1
    LabelQueryAddToSet:
      type: object
      required:
        - $addToSet
      properties:
        $pull:
          oneOf:
            - $ref: "#/components/schemas/Label"
            - $ref: "#/components/schemas/LabelAddToSetAggregation"
    LabelQueryAggregation:
      type: object
      oneOf:
        - $ref: "#/components/schemas/QueryPop"
        - $ref: "#/components/schemas/LabelQueryPush"
        - $ref: "#/components/schemas/LabelQueryPull"
        - $ref: "#/components/schemas/LabelQueryPullAll"
        - $ref: "#/components/schemas/LabelQueryAddToSet"
    BaseMeta:
      type: object
      required:
        - proofs
      properties:
        proofs:
          type: array
          items:
            $ref: "#/components/schemas/Proof"
    DefaultMeta:
      allOf:
        - $ref: "#/components/schemas/BaseMeta"
        - type: object
          properties:
            owners:
              type: array
              items:
                $ref: "#/components/schemas/Owner"
            moment:
              $ref: "#/components/schemas/Moment"
            status:
              type: string
            labels:
              type: array
              items:
                $ref: "#/components/schemas/Label"
    BaseRecord:
      type: object
      required:
        - hash
        - meta
        - luid
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/DefaultMeta"
        luid:
          $ref: "#/components/schemas/Luid"
    BaseUpdateRecord:
      type: object
      required:
        - hash
        - meta
        - luid
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/BaseMeta"
        luid:
          $ref: "#/components/schemas/Luid"
    BaseDropRecord:
      type: object
      required:
        - hash
        - meta
        - luid
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/BaseMeta"
        luid:
          $ref: "#/components/schemas/Luid"
    BaseCreateRecord:
      type: object
      required:
        - hash
        - meta
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/BaseMeta"
    DropData:
      type: object
      required:
        - parent
      properties:
        parent:
          $ref: "#/components/schemas/Hash"
    DropRecord:
      allOf:
        - $ref: "#/components/schemas/BaseDropRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/DropData"
    ReportStatus:
      type: string
      enum:
        - created
        - pending
        - completed
        - rejected
      example: completed
      description: Status of report generation
    ReportAsset:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/Handle"
        output:
          type: string
      description: Asset that was created during report generation
    ReportMeta:
      type: object
      properties:
        thread:
          $ref: "#/components/schemas/Handle"
        status:
          $ref: "#/components/schemas/ReportStatus"
        assets:
          type: array
          items:
            $ref: "#/components/schemas/ReportAsset"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    ReportProof:
      title: Report proof
      allOf:
        - $ref: "#/components/schemas/BaseProof"
        - type: object
          required:
            - custom
          properties:
            custom:
              $ref: "#/components/schemas/ReportProofCustom"
      description: The proof object for reports used to verify the source of any information saved in the system
    ReportProofCustom:
      title: Proof custom for reports
      allOf:
        - $ref: "#/components/schemas/Custom"
        - type: object
          properties:
            moment:
              $ref: "#/components/schemas/Moment"
            status:
              $ref: "#/components/schemas/ReportStatus"
            assets:
              type: array
              items:
                $ref: "#/components/schemas/ReportAsset"
            labels:
              oneOf:
                - $ref: "#/components/schemas/LabelQueryAggregation"
                - type: array
                  items:
                    $ref: "#/components/schemas/Label"
    PageIndex:
      type: integer
      minimum: 0
      example: 0
    PageLimit:
      type: integer
      minimum: 1
      example: 20
    PageTotal:
      type: integer
      minimum: 0
      example: 52
    Page:
      type: object
      required:
        - index
        - limit
      properties:
        index:
          $ref: "#/components/schemas/PageIndex"
        limit:
          $ref: "#/components/schemas/PageLimit"
        total:
          $ref: "#/components/schemas/PageTotal"
    MetaMomentFilter:
      type: string
      format: date-time
      example: "2021-01-28T00:00:00"
      description: Describes filter option for meta.moment
    MetaStatusFilter:
      type: string
      example: pending
      enum:
        - pending
        - committed
        - completed
        - aborted
        - rejected
      description: Describes filter option for meta.status
    BaseFilterQuery:
      type: object
      additionalProperties: true
    WalletAnchorsQuery:
      type: object
      additionalProperties: true
    IntentFilterQuery:
      type: object
      additionalProperties: true
    AnchorFilterQuery:
      type: object
      additionalProperties: true
    ReportFilterQuery:
      type: object
      additionalProperties: true
    PolicyFilterQuery:
      type: object
      additionalProperties: true
    SignerFilterQuery:
      type: object
      additionalProperties: true
    RequestFilterQuery:
      type: object
      additionalProperties: true
    PageQuery:
      type: object
      properties:
        page.index:
          $ref: "#/components/schemas/PageIndex"
        page.limit:
          $ref: "#/components/schemas/PageLimit"
    SchemaFilterQuery:
      type: object
      additionalProperties: true
    BaseList:
      type: object
      required:
        - hash
        - meta
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/BaseMeta"
    BasePagedList:
      allOf:
        - $ref: "#/components/schemas/BaseList"
        - type: object
          required:
            - page
          properties:
            page:
              $ref: "#/components/schemas/Page"
    ChangeAction:
      type: string
      enum:
        - create
        - update
        - drop
      description: Describes the type of change made in the record.
    ChangeMoment:
      type: string
      format: date-time
      description: Describes the moment when the changes were issued to the ledger.
    ChangeNumber:
      type: integer
      minimum: 1
      description: Describes the position of change in record history.
    ChangeMeta:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/ChangeAction"
        moment:
          $ref: "#/components/schemas/ChangeMoment"
        change:
          $ref: "#/components/schemas/ChangeNumber"
    BaseChangeRecord:
      type: object
      required:
        - luid
        - hash
        - meta
      properties:
        luid:
          $ref: "#/components/schemas/Luid"
        hash:
          $ref: "#/components/schemas/Hash"
        meta:
          $ref: "#/components/schemas/ChangeMeta"
    LedgerConfig:
      required:
        - intent.expiryThresholdMinutes
      properties:
        intent.expiryThresholdMinutes:
          type: integer
          minimum: 1
          example: 60
        anchor.walletRequired:
          type: boolean
    LedgerData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - signer
            - handle
          properties:
            handle:
              $ref: "#/components/schemas/Handle"
            signer:
              $ref: "#/components/schemas/Address"
            config:
              $ref: "#/components/schemas/LedgerConfig"
    BaseLedgerRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/LedgerData"
    LedgerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseLedgerRecord"
    CreateLedgerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseLedgerRecord"
    UpdateLedgerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseLedgerRecord"
    LedgerChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseLedgerRecord"
    LedgerChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/LedgerChangeRecord"
    LedgerPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/LedgerRecord"
    BridgeConfig:
      type: object
      required:
        - server
      properties:
        credits.claims.groupBy:
          type: string
          description: "Determines how bridge calls for credit claims are grouped in case multiple claims of one intent are addressed to the same bridge. Default (undefined) behaviour is no grouping, `address` groups by `target.handle`, and `wallet` groups by resolved wallet (where instead of `target.handle` we resolve to a parent wallet)"
          enum:
            - address
            - wallet
        debits.claims.groupBy:
          type: string
          description: "Determines how bridge calls for debit claims are grouped in case multiple claims of one intent are addressed to the same bridge. Default (undefined) behaviour is no grouping, `address` groups by `target.handle`, and `wallet` groups by resolved wallet (where instead of `target.handle` we resolve to a parent wallet)"
          enum:
            - address
            - wallet
        server:
          type: string
      description: Describes bridge configuration which will be shared across all the bridge functionalities
    BridgeSecurityRule:
      type: object
      required:
        - schema
      properties:
        schema:
          type: string
          description: Defines schema of authentication mechanism
      additionalProperties: true
      example:
        schema: oauth2
        client: 6731de76-14a6-49ae-97bc-6eba6914391e
        secret: qWgdYAmab0YSkuL1qKv5bPX
      description: Defines how the ledger authenticates when calling the bridge endpoints.
    BridgeTrait:
      type: string
      enum:
        - debits
        - credits
        - statuses
        - anchors
        - domains
        - effects
    BridgeData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - config
            - secure
          properties:
            schema:
              $ref: "#/components/schemas/Address"
            config:
              $ref: "#/components/schemas/BridgeConfig"
            traits:
              type: array
              items:
                $ref: "#/components/schemas/BridgeTrait"
            secure:
              type: array
              items:
                $ref: "#/components/schemas/BridgeSecurityRule"
    ActivateBridgeData:
      type: object
      properties:
        offset:
          description: "The offset to return events from, in minutes"
          type: integer
          example: 60
    BaseBridgeRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/BridgeData"
    BaseBridgeActivateRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/ActivateBridgeData"
    BridgeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseBridgeRecord"
    CreateBridgeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseBridgeRecord"
    UpdateBridgeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseBridgeRecord"
    BridgeChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseBridgeRecord"
    BridgeChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/BridgeChangeRecord"
    BridgePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/BridgeRecord"
    ActivateBridgeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseBridgeActivateRecord"
    SignerData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - public
            - format
          properties:
            public:
              $ref: "#/components/schemas/PublicKey"
            format:
              $ref: "#/components/schemas/KeyFormat"
            secret:
              $ref: "#/components/schemas/Secret"
    BaseSignerRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/SignerData"
    SignerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseSignerRecord"
    CreateSignerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseSignerRecord"
    UpdateSignerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseSignerRecord"
    SignerChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseSignerRecord"
    SignerChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SignerChangeRecord"
    SignerPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SignerRecord"
    WalletRouteFilter:
      type: object
      additionalProperties: true
    WalletRouteAction:
      type: string
      enum:
        - forward
        - accept
        - debit
        - credit
    WalletRouteForward:
      required:
        - target
      properties:
        action:
          enum:
            - forward
        target:
          $ref: "#/components/schemas/Address"
    WalletRouteDebit:
      required:
        - target
      properties:
        action:
          enum:
            - debit
        target:
          $ref: "#/components/schemas/Address"
    WalletRouteCredit:
      required:
        - target
      properties:
        action:
          enum:
            - credit
        target:
          $ref: "#/components/schemas/Address"
    WalletRouteAccept:
      properties:
        action:
          enum:
            - accept
    WalletRoute:
      type: object
      required:
        - action
      allOf:
        - type: object
          properties:
            action:
              $ref: "#/components/schemas/WalletRouteAction"
            filter:
              $ref: "#/components/schemas/WalletRouteFilter"
        - oneOf:
            - $ref: "#/components/schemas/WalletRouteForward"
            - $ref: "#/components/schemas/WalletRouteAccept"
            - $ref: "#/components/schemas/WalletRouteDebit"
            - $ref: "#/components/schemas/WalletRouteCredit"
          discriminator:
            propertyName: action
            mapping:
              forward: "#/components/schemas/WalletRouteForward"
              accept: "#/components/schemas/WalletRouteAccept"
              debit: "#/components/schemas/WalletRouteDebit"
              credit: "#/components/schemas/WalletRouteCredit"
    WalletData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          properties:
            schema:
              $ref: "#/components/schemas/Address"
            bridge:
              $ref: "#/components/schemas/Address"
            routes:
              type: array
              items:
                $ref: "#/components/schemas/WalletRoute"
    BaseWalletRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/WalletData"
    WalletRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseWalletRecord"
    CreateWalletRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseWalletRecord"
    UpdateWalletRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseWalletRecord"
    WalletChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseWalletRecord"
    WalletChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/WalletChangeRecord"
    WalletPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/WalletRecord"
    WalletLimitData:
      type: object
      required:
        - wallet
        - symbol
        - metric
        - amount
      properties:
        wallet:
          $ref: "#/components/schemas/Address"
        symbol:
          $ref: "#/components/schemas/Address"
        metric:
          $ref: "#/components/schemas/ClaimMetric"
        amount:
          $ref: "#/components/schemas/Amount"
    WalletLimitRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/WalletLimitData"
    WalletLimitPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/WalletLimitRecord"
    WalletBalanceData:
      type: object
      required:
        - wallet
        - symbol
        - amount
      properties:
        wallet:
          $ref: "#/components/schemas/Address"
        symbol:
          $ref: "#/components/schemas/Address"
        amount:
          $ref: "#/components/schemas/Amount"
    WalletBalanceRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/WalletBalanceData"
    WalletBalancePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/WalletBalanceRecord"
    SymbolFactor:
      type: integer
      minimum: 1
      maximum: 1000000000000000
      format: power-of-10
      example: 1
    SymbolData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - factor
          properties:
            schema:
              $ref: "#/components/schemas/Address"
            factor:
              $ref: "#/components/schemas/SymbolFactor"
    BaseSymbolRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/SymbolData"
    SymbolRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseSymbolRecord"
    CreateSymbolRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseSymbolRecord"
    UpdateSymbolRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseSymbolRecord"
    SymbolChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseSymbolRecord"
    SymbolChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SymbolChangeRecord"
    SymbolPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SymbolRecord"
    SchemaFormat:
      type: string
      enum:
        - json-schema
    SchemaAssignedRecord:
      type: string
      enum:
        - anchor
        - anchor-lookup
        - bridge
        - circle
        - domain
        - effect
        - intent
        - policy
        - report
        - signer
        - symbol
        - wallet
    SchemaContent:
      type: object
    SchemaData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - format
            - record
            - schema
          properties:
            format:
              $ref: "#/components/schemas/SchemaFormat"
            record:
              $ref: "#/components/schemas/SchemaAssignedRecord"
            schema:
              $ref: "#/components/schemas/SchemaContent"
            extend:
              $ref: "#/components/schemas/Address"
    BaseSchemaRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/SchemaData"
    SchemaRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseSchemaRecord"
    CreateSchemaRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseSchemaRecord"
    UpdateSchemaRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseSchemaRecord"
    SchemaChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseSchemaRecord"
    SchemaChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SchemaChangeRecord"
    SchemaPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/SchemaRecord"
    ClaimAction:
      type: string
      enum:
        - transfer
        - issue
        - destroy
        - limit
    ClaimSymbol:
      type: object
      required:
        - handle
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        custom:
          $ref: "#/components/schemas/Custom"
    ClaimAddress:
      type: object
      required:
        - handle
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        custom:
          $ref: "#/components/schemas/Custom"
    ClaimMetric:
      type: string
      enum:
        - minBalance
        - maxBalance
        - dailyAmount
        - dailyCount
    IssueClaim:
      title: IssueClaim
      type: object
      required:
        - action
        - target
        - symbol
        - amount
      properties:
        action:
          type: string
          enum:
            - issue
        target:
          $ref: "#/components/schemas/ClaimAddress"
        symbol:
          $ref: "#/components/schemas/ClaimSymbol"
        amount:
          $ref: "#/components/schemas/Amount"
    TransferClaim:
      title: TransferClaim
      type: object
      required:
        - action
        - source
        - target
        - symbol
        - amount
      properties:
        action:
          type: string
          enum:
            - transfer
        source:
          $ref: "#/components/schemas/ClaimAddress"
        target:
          $ref: "#/components/schemas/ClaimAddress"
        symbol:
          $ref: "#/components/schemas/ClaimSymbol"
        amount:
          $ref: "#/components/schemas/Amount"
    DestroyClaim:
      title: DestroyClaim
      type: object
      required:
        - action
        - source
        - symbol
        - amount
      properties:
        action:
          type: string
          enum:
            - destroy
        source:
          $ref: "#/components/schemas/ClaimAddress"
        symbol:
          $ref: "#/components/schemas/ClaimSymbol"
        amount:
          $ref: "#/components/schemas/Amount"
    LimitClaim:
      title: LimitClaim
      type: object
      required:
        - action
        - wallet
        - symbol
        - amount
        - metric
      properties:
        action:
          type: string
          enum:
            - limit
        wallet:
          $ref: "#/components/schemas/ClaimAddress"
        symbol:
          $ref: "#/components/schemas/ClaimSymbol"
        amount:
          $ref: "#/components/schemas/LimitAmount"
        metric:
          $ref: "#/components/schemas/ClaimMetric"
    IntentCommitMode:
      type: string
      enum:
        - auto
        - manual
      description: Enables auto commit in 2 phase commit process when the intent is prepared.
    IntentConfig:
      properties:
        commit:
          $ref: "#/components/schemas/IntentCommitMode"
    BaseIntentRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/IntentData"
        meta:
          $ref: "#/components/schemas/IntentMeta"
    IntentRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseIntentRecord"
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: "#/components/schemas/IntentMeta"
    CreateIntentRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseIntentRecord"
    IntentChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseIntentRecord"
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: "#/components/schemas/IntentMeta"
    IntentChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/IntentChangeRecord"
    IntentPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/IntentRecord"
    RequestSchemaEnum:
      type: string
      enum:
        - rest
    RequestRecordEnum:
      type: string
      enum:
        - advice-alias-resolve
        - anchor
        - anchor-change
        - anchor-proof
        - bridge
        - bridge-change
        - bridge-proof
        - circle
        - circle-change
        - circle-proof
        - circle-signer
        - domain
        - domain-change
        - domain-proof
        - effect
        - effect-change
        - effect-proof
        - entry
        - event
        - intent
        - intent-change
        - intent-proof
        - ledger
        - ledger-change
        - ledger-proof
        - policy
        - policy-change
        - policy-proof
        - report
        - report-change
        - report-proof
        - request
        - schema
        - schema-change
        - schema-proof
        - signer
        - signer-change
        - signer-proof
        - symbol
        - symbol-change
        - symbol-proof
        - wallet
        - wallet-change
        - wallet-proof
    RequestActionEnum:
      type: string
      enum:
        - abort
        - activate
        - assign-signer
        - commit
        - create
        - drop
        - lookup
        - prepare
        - query
        - query-circle
        - query-signer
        - read
        - read-balance
        - read-limit
        - read-signer
        - remove-signer
        - send
        - update
    RestParams:
      type: object
      properties:
        method:
          type: string
        path:
          type: string
        headers:
          type: object
        body:
          type: object
        timestamp:
          type: string
          format: date-time
    RestResult:
      type: object
      properties:
        status:
          type: integer
        headers:
          type: object
        body:
          type: object
        timestamp:
          type: string
          format: date-time
    RequestParams:
      oneOf:
        - $ref: "#/components/schemas/RestParams"
    RequestResult:
      oneOf:
        - $ref: "#/components/schemas/RestResult"
    RequestData:
      type: object
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        parent:
          $ref: "#/components/schemas/Hash"
        access:
          $ref: "#/components/schemas/Access"
        schema:
          $ref: "#/components/schemas/RequestSchemaEnum"
        record:
          $ref: "#/components/schemas/RequestRecordEnum"
        action:
          $ref: "#/components/schemas/RequestActionEnum"
        source:
          type: string
        target:
          type: string
        params:
          $ref: "#/components/schemas/RequestParams"
        result:
          $ref: "#/components/schemas/RequestResult"
      required:
        - handle
        - access
        - schema
        - record
        - action
        - source
        - target
        - params
        - result
    BaseRequestRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/RequestData"
    RequestRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseRequestRecord"
    RequestPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/RequestRecord"
    AnchorData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - wallet
            - target
          properties:
            schema:
              $ref: "#/components/schemas/Address"
            wallet:
              $ref: "#/components/schemas/Address"
            symbol:
              $ref: "#/components/schemas/Address"
            target:
              $ref: "#/components/schemas/Address"
    BaseAnchorRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/AnchorData"
    AnchorRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseAnchorRecord"
    CreateAnchorRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseAnchorRecord"
    UpdateAnchorRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseAnchorRecord"
    AnchorChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseAnchorRecord"
    AnchorChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AnchorChangeRecord"
    AnchorPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AnchorRecord"
    AnchorLookupPayloadData:
      type: object
      properties:
        custom:
          $ref: "#/components/schemas/Custom"
        access:
          $ref: "#/components/schemas/Access"
        schema:
          $ref: "#/components/schemas/Address"
        wallet:
          $ref: "#/components/schemas/Address"
        symbol:
          $ref: "#/components/schemas/Address"
        target:
          $ref: "#/components/schemas/Address"
    AnchorLookupPayload:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AnchorLookupPayloadData"
    AnchorList:
      allOf:
        - $ref: "#/components/schemas/BaseList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/AnchorRecord"
    DomainData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - handle
          properties:
            handle:
              $ref: "#/components/schemas/Handle"
            schema:
              $ref: "#/components/schemas/Address"
    BaseDomainRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/DomainData"
    DomainRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseDomainRecord"
    CreateDomainRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseDomainRecord"
    UpdateDomainRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseDomainRecord"
    DomainChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseDomainRecord"
    DomainChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/DomainChangeRecord"
    DomainList:
      allOf:
        - $ref: "#/components/schemas/BaseList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/DomainRecord"
    DomainPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/DomainRecord"
    AdviceAliasResolveResultDataValue:
      type: object
      required:
        - handle
      properties:
        schema:
          $ref: "#/components/schemas/Address"
        handle:
          $ref: "#/components/schemas/Address"
        custom:
          $ref: "#/components/schemas/Custom"
    AdviceAliasResolveResultData:
      type: object
      required:
        - values
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/AdviceAliasResolveResultDataValue"
    AdviceAliasResolveResult:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AdviceAliasResolveResultData"
    AdviceAliasResolveData:
      type: object
      required:
        - handle
      properties:
        handle:
          $ref: "#/components/schemas/Address"
        symbol:
          $ref: "#/components/schemas/Address"
    AdviceAliasResolve:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AdviceAliasResolveData"
    ReportData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - schema
          properties:
            schema:
              $ref: "#/components/schemas/Address"
    BaseReportRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/ReportData"
        meta:
          $ref: "#/components/schemas/ReportMeta"
    ReportRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseReportRecord"
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: "#/components/schemas/ReportMeta"
    CreateReportRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseReportRecord"
    ReportChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseReportRecord"
        - type: object
          required:
            - meta
          properties:
            meta:
              $ref: "#/components/schemas/ReportMeta"
    ReportChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/ReportChangeRecord"
    ReportPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/ReportRecord"
    EventSignal:
      type: string
      enum:
        - anchor-created
        - anchor-dropped
        - anchor-proofs-added
        - anchor-updated
        - balance-received
        - bridge-created
        - bridge-entry-created
        - bridge-entry-proofs-added
        - bridge-entry-updated
        - bridge-proofs-added
        - bridge-updated
        - circle-created
        - circle-proofs-added
        - circle-updated
        - domain-created
        - domain-proofs-added
        - domain-updated
        - effect-created
        - effect-proofs-added
        - effect-updated
        - intent-created
        - intent-proofs-added
        - intent-updated
        - ledger-created
        - ledger-proofs-added
        - ledger-updated
        - policy-created
        - policy-proofs-added
        - policy-updated
        - report-created
        - report-dropped
        - report-proofs-added
        - report-updated
        - request-created
        - request-proofs-added
        - request-updated
        - schema-created
        - schema-proofs-added
        - schema-updated
        - signer-created
        - signer-proofs-added
        - signer-updated
        - symbol-created
        - symbol-proofs-added
        - symbol-updated
        - wallet-created
        - wallet-limited
        - wallet-proofs-added
        - wallet-updated
    EffectFilter:
      type: object
      additionalProperties: true
      example:
        wallet.data.handle: bank1
    EffectActionSchema:
      type: string
      enum:
        - webhook
    EffectWebhookAction:
      title: EffectWebhookAction
      type: object
      required:
        - schema
        - endpoint
      properties:
        schema:
          type: string
          enum:
            - webhook
        endpoint:
          type: string
          format: uri
          example: "http://bank1.minkainc.dev/webhook/balance-received"
    EffectBridgeAction:
      title: EffectBridgeAction
      type: object
      required:
        - schema
        - bridge
      properties:
        schema:
          type: string
          enum:
            - bridge
        bridge:
          $ref: "#/components/schemas/Address"
    EffectData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - signal
            - action
          properties:
            schema:
              $ref: "#/components/schemas/Address"
            signal:
              $ref: "#/components/schemas/EventSignal"
            filter:
              $ref: "#/components/schemas/EffectFilter"
            action:
              oneOf:
                - $ref: "#/components/schemas/EffectWebhookAction"
                - $ref: "#/components/schemas/EffectBridgeAction"
              discriminator:
                propertyName: schema
                mapping:
                  webhook: "#/components/schemas/EffectWebhookAction"
                  bridge: "#/componenets/schemas/EffectBridgeAction"
    BaseEffectRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/EffectData"
    EffectRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseEffectRecord"
    CreateEffectRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseEffectRecord"
    UpdateEffectRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseEffectRecord"
    EffectChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseEffectRecord"
    EffectChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/EffectChangeRecord"
    EffectPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/EffectRecord"
    PolicySchema:
      type: string
      enum:
        - status
        - access
        - labels
    PolicyFilter:
      type: object
      additionalProperties: true
      example:
        data.schema: bank
    PolicyData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          required:
            - record
          properties:
            schema:
              $ref: "#/components/schemas/PolicySchema"
            record:
              $ref: "#/components/schemas/AccessRecord"
            values:
              $ref: "#/components/schemas/PolicyValues"
            extend:
              $ref: "#/components/schemas/Address"
            filter:
              $ref: "#/components/schemas/PolicyFilter"
    BasePolicyRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/PolicyData"
    PolicyRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BasePolicyRecord"
    CreatePolicyRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BasePolicyRecord"
    UpdatePolicyRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BasePolicyRecord"
    PolicyChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BasePolicyRecord"
    PolicyChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/PolicyChangeRecord"
    PolicyPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/PolicyRecord"
    CircleData:
      allOf:
        - $ref: "#/components/schemas/CommonData"
        - type: object
          properties:
            schema:
              $ref: "#/components/schemas/Address"
    BaseCircleRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/CircleData"
    CircleRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseCircleRecord"
    CreateCircleRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseCircleRecord"
    UpdateCircleRecord:
      allOf:
        - $ref: "#/components/schemas/BaseUpdateRecord"
        - $ref: "#/components/schemas/BaseCircleRecord"
    CircleChangeRecord:
      allOf:
        - $ref: "#/components/schemas/BaseChangeRecord"
        - $ref: "#/components/schemas/BaseCircleRecord"
    CircleChangePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/CircleChangeRecord"
    CirclePagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/CircleRecord"
    CircleSignerData:
      type: object
      required:
        - circle
        - signer
      properties:
        schema:
          $ref: "#/components/schemas/Address"
        circle:
          $ref: "#/components/schemas/Address"
        signer:
          $ref: "#/components/schemas/Address"
        custom:
          $ref: "#/components/schemas/Custom"
    BaseCircleSignerRecord:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/CircleSignerData"
    CircleSignerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseRecord"
        - $ref: "#/components/schemas/BaseCircleSignerRecord"
    CreateCircleSignerRecord:
      allOf:
        - $ref: "#/components/schemas/BaseCreateRecord"
        - $ref: "#/components/schemas/BaseCircleSignerRecord"
    CircleSignerPagedList:
      allOf:
        - $ref: "#/components/schemas/BasePagedList"
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/CircleSignerRecord"
    ErrorReason:
      type: string
      example: Error reason message
    ErrorDetail:
      type: object
    ErrorData:
      type: object
      required:
        - reason
      properties:
        reason:
          $ref: "#/components/schemas/ErrorReason"
        detail:
          $ref: "#/components/schemas/ErrorDetail"
    Error:
      type: object
      required:
        - hash
        - data
        - meta
      properties:
        hash:
          $ref: "#/components/schemas/Hash"
        data:
          $ref: "#/components/schemas/ErrorData"
        meta:
          $ref: "#/components/schemas/BaseMeta"
    RecordSchemaInvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.schema-invalid
    RecordUpdateRejectedError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.update-rejected
    RecordDropRejectedError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.drop-rejected
    AuthUnauthorizedError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - auth.unauthorized
    AuthForbiddenError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - auth.forbidden
    RecordNotFoundError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.not-found
    RecordRelationNotFoundError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.relation-not-found
    RecordDuplicatedError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.duplicated
    RecordInvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - record.invalid
    CryptoHashInvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - crypto.hash-invalid
    CryptoSignatureInvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - crypto.signature-invalid
    ApiUnexpectedError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            data:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - api.unexpected-error
  parameters:
    ActiveLedger:
      name: x-ledger
      in: header
      required: false
      schema:
        oneOf:
          - $ref: "#/components/schemas/LedgerHandle"
          - $ref: "#/components/schemas/Luid"
      description: "La identificaci√≥n √∫nica de Ledger en el contexto de solicitudes multi-tenant."
    Address:
      name: address
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Address"
      description: The address of the record
    LedgerHandleIdentifier:
      name: id
      in: path
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/Handle"
          - $ref: "#/components/schemas/Luid"
      description: The unique identifier of the record - its luid or handle.
    LedgerAddressIdentifier:
      name: id
      in: path
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/Address"
          - $ref: "#/components/schemas/Luid"
      description: The unique identifier of the record - its luid or address.
    WalletIdentifier:
      name: id
      in: path
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/Address"
          - $ref: "#/components/schemas/Luid"
      description: The unique identifier of the wallet record - its luid or address.
    Link:
      name: link
      in: path
      required: true
      schema:
        oneOf:
          - $ref: "#/components/schemas/Address"
          - $ref: "#/components/schemas/Luid"
      description: The unique identifier of the record linked - its luid or address.
    Change:
      name: change
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ChangeNumber"
      description: The change number of the record
    BaseFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/BaseFilterQuery"
      description: Base filter parameters
    SignerFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/SignerFilterQuery"
    WalletAnchorsFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/WalletAnchorsQuery"
    IntentFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/IntentFilterQuery"
      description: Base filter parameters
    PolicyFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/PolicyFilterQuery"
      description: Base filter parameters
    AnchorFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/AnchorFilterQuery"
    ReportFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/ReportFilterQuery"
    RequestFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/RequestFilterQuery"
      description: Request filter
    Page:
      name: page
      in: query
      schema:
        $ref: "#/components/schemas/PageQuery"
      description: Page query parameters
    SchemaFilter:
      name: filter
      in: query
      schema:
        $ref: "#/components/schemas/SchemaFilterQuery"
      description: Query by record type
